/**
 * üîß Script de migration automatique complet
 * Applique toutes les migrations n√©cessaires en une seule commande
 */

const Database = require('better-sqlite3');
const path = require('path');
const fs = require('fs');

const dbPath = path.join(process.cwd(), 'data', 'memoire.db');
const dbDir = path.dirname(dbPath);

// Cr√©er le dossier data s'il n'existe pas
if (!fs.existsSync(dbDir)) {
  fs.mkdirSync(dbDir, { recursive: true });
  console.log('üìÅ Dossier data cr√©√©');
}

const db = new Database(dbPath);

console.log('üöÄ D√©marrage des migrations...\n');

// Liste des migrations √† appliquer
const migrations = [
  {
    name: 'Ajouter colonne images √† conversations',
    check: () => {
      const tableInfo = db.prepare("PRAGMA table_info(conversations)").all();
      return !tableInfo.some(col => col.name === 'images');
    },
    apply: () => {
      db.exec('ALTER TABLE conversations ADD COLUMN images TEXT');
    }
  },
  {
    name: 'V√©rifier types de projets',
    check: () => {
      // Cette migration est toujours OK car project_type accepte toute valeur TEXT
      return false;
    },
    apply: () => {
      // Pas d'action n√©cessaire
    }
  }
];

// Appliquer les migrations
let appliedCount = 0;
let skippedCount = 0;

migrations.forEach((migration, index) => {
  try {
    if (migration.check()) {
      console.log(`‚è≥ Migration ${index + 1}: ${migration.name}...`);
      migration.apply();
      console.log(`‚úÖ Migration ${index + 1}: ${migration.name} - R√©ussie\n`);
      appliedCount++;
    } else {
      console.log(`‚è≠Ô∏è  Migration ${index + 1}: ${migration.name} - D√©j√† appliqu√©e\n`);
      skippedCount++;
    }
  } catch (error) {
    console.error(`‚ùå Migration ${index + 1}: ${migration.name} - Erreur:`);
    console.error(error.message);
    console.log('');
  }
});

// V√©rifier l'int√©grit√© de la base de donn√©es
try {
  const integrityCheck = db.prepare('PRAGMA integrity_check').get();
  if (integrityCheck.integrity_check === 'ok') {
    console.log('‚úÖ V√©rification d\'int√©grit√©: OK');
  } else {
    console.warn('‚ö†Ô∏è  Probl√®me d\'int√©grit√© d√©tect√©:', integrityCheck);
  }
} catch (error) {
  console.error('‚ùå Erreur lors de la v√©rification d\'int√©grit√©:', error.message);
}

// Afficher le r√©sum√©
console.log('\n' + '='.repeat(50));
console.log('üìä R√âSUM√â DES MIGRATIONS');
console.log('='.repeat(50));
console.log(`‚úÖ Migrations appliqu√©es: ${appliedCount}`);
console.log(`‚è≠Ô∏è  Migrations d√©j√† pr√©sentes: ${skippedCount}`);
console.log(`üìù Total: ${migrations.length}`);
console.log('='.repeat(50) + '\n');

// Afficher la structure des tables
console.log('üìã Structure de la table conversations:');
const conversationsStructure = db.prepare("PRAGMA table_info(conversations)").all();
conversationsStructure.forEach(col => {
  console.log(`   - ${col.name} (${col.type})`);
});

db.close();
console.log('\n‚úÖ Migrations termin√©es avec succ√®s!');
