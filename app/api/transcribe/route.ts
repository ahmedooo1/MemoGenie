import { NextRequest, NextResponse } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';

export async function POST(request: NextRequest) {
  try {
    const apiKey = process.env.GEMINI_API_KEY || '';
    if (!apiKey) {
      console.error('‚ùå GEMINI_API_KEY not set');
      return NextResponse.json({ error: 'GEMINI_API_KEY not configured on the server. Please set GEMINI_API_KEY in your environment.' }, { status: 500 });
    }

    const genAI = new GoogleGenerativeAI(apiKey);
    const formData = await request.formData();
    const audioFile = formData.get('audio') as File;
    
    if (!audioFile) {
      return NextResponse.json({ error: 'No audio file provided' }, { status: 400 });
    }

    console.log('üé§ Transcription audio re√ßue:', audioFile.size, 'bytes, type:', audioFile.type);

    // Convertir le fichier audio en base64
    const arrayBuffer = await audioFile.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);
    const base64Audio = buffer.toString('base64');

  // Essayer diff√©rents mod√®les Gemini qui supportent l'audio
    let transcription = '';
    
    // Liste des mod√®les √† essayer dans l'ordre
    const modelsToTry = [
      'gemini-2.0-flash-exp',
      'gemini-1.5-pro-latest',
      'gemini-1.5-pro',
      'gemini-pro'
    ];
    
    for (const modelName of modelsToTry) {
      try {
        console.log(`üîÑ Essai avec ${modelName}...`);
        const model = genAI.getGenerativeModel({ model: modelName });
        
        const prompt = `Transcris exactement ce qui est dit dans cet enregistrement audio. 
Retourne UNIQUEMENT le texte parl√©, sans commentaires, sans explications, sans formatage.
Si c'est en fran√ßais, transcris en fran√ßais.
Si c'est en arabe, transcris en arabe en utilisant les caract√®res arabes.
Ne dis pas "L'audio dit" ou "Je transcris" - retourne juste le texte exact.`;

        const result = await model.generateContent([
          {
            inlineData: {
              data: base64Audio,
              mimeType: audioFile.type || 'audio/webm'
            }
          },
          prompt
        ]);
        
        transcription = result.response.text().trim();
        console.log(`‚úÖ Transcription avec ${modelName} r√©ussie:`, transcription);
        break; // Succ√®s, sortir de la boucle
        
      } catch (error: any) {
        console.log(`‚ö†Ô∏è ${modelName} a √©chou√©:`, error.message);
        // Continuer avec le mod√®le suivant
      }
    }
    
    if (!transcription) {
      throw new Error('Aucun mod√®le Gemini disponible pour la transcription audio. Les mod√®les Gemini actuels ne supportent peut-√™tre pas l\'audio dans votre r√©gion.');
    }

    return NextResponse.json({ 
      transcription,
      success: true 
    });

  } catch (error: any) {
    console.error('‚ùå Erreur transcription:', error);
    return NextResponse.json({ 
      error: error.message || 'Erreur lors de la transcription',
      success: false 
    }, { status: 500 });
  }
}
